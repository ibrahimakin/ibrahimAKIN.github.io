{"version":3,"sources":["gameHelpers.js","lang/index.js","components/styles/StyledTetris.js","tetrominos.js","hooks/useStage.js","components/styles/StyledStage.js","components/styles/StyledCell.js","components/Cell.js","components/Stage.js","components/Tetris.js","hooks/usePlayer.js","hooks/useGameStatus.js","helpers/index.js","hooks/useInterval.js","App.js","serviceWorker.js","index.js"],"names":["createStage","Array","from","fill","checkCollision","player","stage","moveX","x","moveY","y","tetromino","length","pos","langObjTetris","tr","score","rows","level","start_game","game_over","high_score","max_rows","pause_game","resume_game","en","StyledTetrisWrapper","styled","div","StyledTetris","TETROMINOS","0","shape","color","I","J","L","O","S","T","Z","randomTetromino","randTetromino","Math","floor","random","useStage","resetPlayer","useState","setStage","rowsCleared","setRowsCleared","useEffect","updateStage","prevStage","newStage","map","row","cell","forEach","value","collided","reduce","ack","findIndex","prev","unshift","push","sweepRows","StyledStage","props","height","width","StyledCell","type","React","memo","Stage","key","Tetris","dropTime","setDropTime","gameOver","setGameOver","started","setStarted","paused","setPaused","setPlayer","rotate","matrix","dir","rotatedTetro","_","index","col","reverse","useCallback","STAGE_WIDTH","clonedPlayer","JSON","parse","stringify","offset","usePlayer","updatePlayerPos","playerRotate","setScore","setRows","setLevel","highScore","setHighScore","maxRows","setMaxRows","linePoints","calcScore","newScore","localStorage","setItem","newRows","best","getItem","parseInt","useGameStatus","lang","localLang","getLangTetris","movePlayer","drop","move","keyCode","callback","delay","savedCallback","useRef","current","id","setInterval","clearInterval","useInterval","role","tabIndex","onKeyDown","e","onKeyUp","style","minHeight","minWidth","className","lang-tag","onClick","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d1b9be75.chunk.js","sourcesContent":["export const STAGE_WIDTH = 12;\nexport const STAGE_HEIGHT = 20;\n\nexport const createStage = () =>\n  Array.from(Array(STAGE_HEIGHT), () =>\n    new Array(STAGE_WIDTH).fill([0, 'clear']),\n  );\n\nexport const checkCollision = (player, stage, { x: moveX, y: moveY }) => {\n  for (let y = 0; y < player.tetromino.length; y += 1) {\n    for (let x = 0; x < player.tetromino[y].length; x += 1) {\n      // 1. Check that we're on an actual Tetromino cell\n      if (player.tetromino[y][x] !== 0) {\n        if (\n          // 2. Check that our move is inside the game areas height (y)\n          // We shouldn't go through the bottom of the play area\n          !stage[y + player.pos.y + moveY] ||\n          // 3. Check that our move is inside the game areas width (x)\n          !stage[y + player.pos.y + moveY][x + player.pos.x + moveX] ||\n          // 4. Check that the cell wer'e moving to isn't set to clear\n          stage[y + player.pos.y + moveY][x + player.pos.x + moveX][1] !==\n            'clear'\n        ) {\n          return true;\n        }\n      }\n    }\n  }\n};\n","export const langObjTetris = {\r\n    tr : {\r\n        score: 'Skor',\r\n        rows: 'Rows',\r\n        level: 'Seviye',\r\n        start_game: 'Oyuna Basla',\r\n        game_over: 'Oyun Bitti',\r\n        high_score: 'En Yüksek Skor',\r\n        max_rows: 'Max Rows',\r\n        pause_game: 'Durdur',\r\n        resume_game: 'Devam Et'\r\n    },\r\n    en: {\r\n        score: 'Score',\r\n        rows: 'Rows',\r\n        level: 'Level',\r\n        start_game: 'Start Game',\r\n        game_over: 'Game Over',\r\n        high_score: 'High Score',\r\n        max_rows: 'Max Rows',\r\n        pause_game: 'Pause Game',\r\n        resume_game: 'Resume Game'\r\n    }\r\n}","import styled from 'styled-components';\r\n\r\nexport const StyledTetrisWrapper = styled.div`\r\n  width: 100%;\r\n  height: 100%;\r\n  overflow: auto;\r\n`;\r\n\r\nexport const StyledTetris = styled.div`\r\n  display: flex;\r\n  align-items: flex-start;\r\n  padding: 35px 0 0 35px;\r\n  margin: 0 auto;\r\n  max-width: 900px;\r\n  aside {\r\n    width: 100%;\r\n    max-width: 200px;\r\n    display: block;\r\n    padding: 0 20px;\r\n  }\r\n`;\r\n","export const TETROMINOS = {\n  0: { shape: [[0]], color: '0, 0, 0' },\n  I: {\n    shape: [[0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0], [0, 'I', 0, 0]],\n    color: '80, 227, 230',\n  },\n  J: {\n    shape: [[0, 'J', 0], [0, 'J', 0], ['J', 'J', 0]],\n    color: '36, 95, 223',\n  },\n  L: {\n    shape: [[0, 'L', 0], [0, 'L', 0], [0, 'L', 'L']],\n    color: '223, 173, 36',\n  },\n  O: {\n    shape: [['O', 'O'], ['O', 'O']],\n    color: '223, 217, 36',\n  },\n  S: {\n    shape: [[0, 'S', 'S'], ['S', 'S', 0], [0, 0, 0]],\n    color: '48, 211, 56',\n  },\n  T: {\n    shape: [[0, 0, 0], ['T', 'T', 'T'], [0, 'T', 0]],\n    color: '132, 61, 198',\n  },\n  Z: {\n    shape: [['Z', 'Z', 0], [0, 'Z', 'Z'], [0, 0, 0]],\n    color: '227, 78, 78',\n  },\n};\n\nexport const randomTetromino = () => {\n  const tetrominos = 'IJLOSTZ';\n  const randTetromino =\n    tetrominos[Math.floor(Math.random() * tetrominos.length)];\n  return TETROMINOS[randTetromino];\n};\n","import { useState, useEffect } from 'react';\nimport { createStage } from '../gameHelpers';\n\nexport const useStage = (player, resetPlayer) => {\n  const [stage, setStage] = useState(createStage());\n  const [rowsCleared, setRowsCleared] = useState(0);\n\n  useEffect(() => {\n    setRowsCleared(0);\n\n    const sweepRows = newStage =>\n      newStage.reduce((ack, row) => {\n        if (row.findIndex(cell => cell[0] === 0) === -1) {\n          setRowsCleared(prev => prev + 1);\n          ack.unshift(new Array(newStage[0].length).fill([0, 'clear']));\n          return ack;\n        }\n        ack.push(row);\n        return ack;\n      }, [])\n\n    const updateStage = prevStage => {\n      // First flush the stage\n      const newStage = prevStage.map(row =>\n        row.map(cell => (cell[1] === 'clear' ? [0, 'clear'] : cell)),\n      );\n\n      // Then draw the tetromino\n      player.tetromino.forEach((row, y) => {\n        row.forEach((value, x) => {\n          if (value !== 0) {\n            newStage[y + player.pos.y][x + player.pos.x] = [\n              value,\n              `${player.collided ? 'merged' : 'clear'}`,\n            ];\n          }\n        });\n      });\n      // Then check if we collided\n      if (player.collided) {\n        resetPlayer();\n        return sweepRows(newStage);\n      }\n      return newStage;\n    };\n\n    setStage(prev => updateStage(prev));\n  }, [player, resetPlayer]);\n\n  return [stage, setStage, rowsCleared];\n};\n","import styled from 'styled-components';\r\n\r\nexport const StyledStage = styled.div`\r\n  display: grid;\r\n  grid-template-rows: repeat(\r\n    ${props => props.height},\r\n    1fr\r\n  );\r\n  grid-template-columns: repeat(${props => props.width}, 1fr);\r\n  grid-gap: 1px;\r\n  border: 2px solid #333;\r\n  height:100%;\r\n  background: #111;\r\n`;","import styled from 'styled-components';\n\nexport const StyledCell = styled.div`\n  width: auto;\n  background: rgba(${props => props.color}, 0.8);\n  border: ${props => (props.type === 0 ? '0px solid' : '4px solid')};\n  border-bottom-color: rgba(${props => props.color}, 0.1);\n  border-right-color: rgba(${props => props.color}, 1);\n  border-top-color: rgba(${props => props.color}, 1);\n  border-left-color: rgba(${props => props.color}, 0.3);\n`","import React from 'react';\nimport { StyledCell } from './styles/StyledCell';\nimport { TETROMINOS } from '../tetrominos';\n\nconst Cell = ({ type }) => (\n  <StyledCell type={type} color={TETROMINOS[type].color} />\n)\n\nexport default React.memo(Cell);","import React from 'react';\nimport { StyledStage } from './styles/StyledStage';\n\nimport Cell from './Cell';\n\nconst Stage = ({ stage }) => (\n  <StyledStage width={stage[0].length} height={stage.length}>\n    {stage.map(row => row.map((cell, x) => <Cell key={x} type={cell[0]} />))}\n  </StyledStage>\n);\n\nexport default Stage;\n","import React, { useState } from 'react';\r\n\r\nimport { createStage, checkCollision } from '../gameHelpers';\r\nimport { getLangTetris } from '../helpers';\r\nimport { langObjTetris } from '../lang';\r\n\r\n// Styled Components\r\nimport { StyledTetrisWrapper, StyledTetris } from './styles/StyledTetris';\r\n\r\n// Custom Hooks\r\nimport { useInterval } from '../hooks/useInterval';\r\nimport { usePlayer } from '../hooks/usePlayer';\r\nimport { useStage } from '../hooks/useStage';\r\nimport { useGameStatus } from '../hooks/useGameStatus';\r\n\r\n// Components\r\nimport Stage from './Stage';\r\n\r\nconst Tetris = (props) => {\r\n  const [dropTime, setDropTime] = useState(null);\r\n  const [gameOver, setGameOver] = useState(false);\r\n  const [started, setStarted] = useState(false);\r\n  const [paused, setPaused] = useState(false);\r\n\r\n  const [player, updatePlayerPos, resetPlayer, playerRotate] = usePlayer();\r\n  const [stage, setStage, rowsCleared] = useStage(player, resetPlayer);\r\n  const [score, setScore, rows, setRows, level, setLevel, highScore, maxRows] = useGameStatus(rowsCleared);\r\n\r\n  let lang = getLangTetris();\r\n\r\n  const movePlayer = dir => {\r\n    if (!paused && !checkCollision(player, stage, { x: dir, y: 0 })) {\r\n      updatePlayerPos({ x: dir, y: 0 });\r\n    }\r\n  };\r\n\r\n  const startGame = () => {\r\n    // Reset everything\r\n    setStarted(true);\r\n    setStage(createStage());\r\n    setDropTime(1000);\r\n    resetPlayer();\r\n    setGameOver(false);\r\n    setScore(0);\r\n    setRows(0);\r\n    setLevel(0);\r\n  };\r\n\r\n  const handleResume = () => {\r\n    setPaused(false);\r\n  }\r\n\r\n  const handlePause = () => {\r\n    setPaused(true);\r\n  }\r\n\r\n  const drop = () => {\r\n    // Increase level when player has cleared 10 rows\r\n    if (rows > (level + 1) * 10) {\r\n      setLevel(prev => prev + 1);\r\n      // Also increase speed\r\n      setDropTime(1000 / (level + 1) + 200);\r\n    }\r\n\r\n    if (!paused) {\r\n      if (!checkCollision(player, stage, { x: 0, y: 1 })) {\r\n        updatePlayerPos({ x: 0, y: 1, collided: false });\r\n      } else {\r\n        // Game Over\r\n        if (player.pos.y < 1) {\r\n          setGameOver(true);\r\n          setStarted(false);\r\n          setDropTime(null);\r\n        }\r\n        updatePlayerPos({ x: 0, y: 0, collided: true });\r\n      }\r\n    }\r\n  };\r\n\r\n  const keyUp = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 40) {\r\n        setDropTime(1000 / (level + 1) + 200);\r\n      }\r\n    }\r\n  };\r\n\r\n  const dropPlayer = () => {\r\n    setDropTime(null);\r\n    drop();\r\n  };\r\n\r\n  const move = ({ keyCode }) => {\r\n    if (!gameOver) {\r\n      if (keyCode === 37) { movePlayer(-1); } \r\n      else if (keyCode === 39) { movePlayer(1); }\r\n      else if (keyCode === 40) { dropPlayer(); }\r\n      else if (keyCode === 38) {\r\n        if (!paused) { playerRotate(stage, 1); }\r\n      }\r\n    }\r\n  };\r\n\r\n  useInterval(() => { drop(); }, dropTime);\r\n\r\n  return (\r\n    <StyledTetrisWrapper\r\n      role=\"button\"\r\n      tabIndex=\"0\"\r\n      onKeyDown={e => move(e)}\r\n      onKeyUp={keyUp}\r\n    >\r\n      <StyledTetris>\r\n        <div style={{minHeight:'80vmin', minWidth:`${80*(stage[0].length/stage.length)}vmin`, height:'80vmin', width:`${80*(stage[0].length/stage.length)}vmin`}}>\r\n          <Stage stage={stage} />\r\n        </div>\r\n        <aside>\r\n          { gameOver ? (\r\n            <div className=\"styled-display gameover\"><span lang-tag=\"game_over\">{langObjTetris[lang]['game_over']}</span></div>\r\n          ) : (\r\n            <div>\r\n              <div className=\"styled-display\"><span lang-tag=\"high_score\">{langObjTetris[lang]['high_score']}</span>{`: ${highScore}`}</div>\r\n              <div className=\"styled-display\"><span lang-tag=\"score\">{langObjTetris[lang]['score']}</span>{`: ${score}`}</div>\r\n              <div className=\"styled-display\"><span lang-tag=\"max_rows\">{langObjTetris[lang]['max_rows']}</span>{`: ${maxRows}`}</div>\r\n              <div className=\"styled-display\"><span lang-tag=\"rows\">{langObjTetris[lang]['rows']}</span>{`: ${rows}`}</div>\r\n              <div className=\"styled-display\"><span lang-tag=\"level\">{langObjTetris[lang]['level']}</span>{`: ${level}`}</div>\r\n            </div>\r\n          )}\r\n          <button className=\"styled-button\" onClick={startGame}><span lang-tag=\"start_game\">Start Game</span></button>\r\n          { started ? (paused ?\r\n            <button className=\"styled-button\" onClick={handleResume}><span lang-tag=\"resume_game\">{langObjTetris[lang]['resume_game']}</span></button>:\r\n            <button className=\"styled-button\" onClick={handlePause}><span lang-tag=\"pause_game\">{langObjTetris[lang]['pause_game']}</span></button>) : null\r\n          }\r\n        </aside>\r\n      </StyledTetris>\r\n    </StyledTetrisWrapper>\r\n  );\r\n};\r\n\r\nexport default Tetris;\r\n","import { useState, useCallback } from 'react';\n\nimport { TETROMINOS, randomTetromino } from '../tetrominos';\nimport { STAGE_WIDTH, checkCollision } from '../gameHelpers';\n\nexport const usePlayer = () => {\n  const [player, setPlayer] = useState({\n    pos: { x: 0, y: 0 },\n    tetromino: TETROMINOS[0].shape,\n    collided: false,\n  });\n\n  const rotate = (matrix, dir) => {\n    // Make the rows to become cols (transpose)\n    const rotatedTetro = matrix.map((_, index) =>\n      matrix.map(col => col[index]),\n    );\n    // Reverse each row to get a rotated matrix\n    if (dir > 0) return rotatedTetro.map(row => row.reverse());\n    return rotatedTetro.reverse();\n  };\n\n  const playerRotate = (stage, dir) => {\n    const clonedPlayer = JSON.parse(JSON.stringify(player));\n    clonedPlayer.tetromino = rotate(clonedPlayer.tetromino, dir);\n\n    const pos = clonedPlayer.pos.x;\n    let offset = 1;\n    while(checkCollision(clonedPlayer, stage, { x: 0, y: 0 })) {\n      clonedPlayer.pos.x += offset;\n      offset = -(offset + (offset > 0 ? 1 : -1));\n      if (offset > clonedPlayer.tetromino[0].length) {\n        rotate(clonedPlayer.tetromino, -dir);\n        clonedPlayer.pos.x = pos;\n        return;\n      }\n    }\n    setPlayer(clonedPlayer);\n  };\n\n  const updatePlayerPos = ({ x, y, collided }) => {\n    setPlayer(prev => ({\n      ...prev,\n      pos: { x: (prev.pos.x += x), y: (prev.pos.y += y) },\n      collided,\n    }));\n  };\n\n  const resetPlayer = useCallback(() => {\n    setPlayer({\n      pos: { x: STAGE_WIDTH / 2 - 2, y: 0 },\n      tetromino: randomTetromino().shape,\n      collided: false,\n    });\n  }, []);\n\n  return [player, updatePlayerPos, resetPlayer, playerRotate];\n};\n","import { useState, useEffect, useCallback } from 'react';\r\n\r\nexport const useGameStatus = rowsCleared => {\r\n    const [score, setScore] = useState(0);\r\n    const [rows, setRows] = useState(0);\r\n    const [level, setLevel] = useState(0);\r\n    const [highScore, setHighScore] = useState(0);\r\n    const [maxRows, setMaxRows] = useState(0);\r\n\r\n    const linePoints = [40, 100, 300, 1200];\r\n\r\n    const calcScore = useCallback(() => {\r\n        // We have score\r\n        if (rowsCleared > 0) {\r\n            // This is how original Tetris score is calculated\r\n            setScore(prev => {\r\n                let newScore = prev + linePoints[rowsCleared - 1] * (level + 1);\r\n                if (newScore > highScore) {\r\n                    setHighScore(newScore);\r\n                    localStorage.setItem('tetrisHighScore', newScore);\r\n                }\r\n                return newScore;\r\n            });\r\n            setRows(prev => {\r\n                let newRows = prev + rowsCleared;\r\n                if (newRows > maxRows) {\r\n                    setMaxRows(newRows);\r\n                    localStorage.setItem('tetrisMaxRows', maxRows);\r\n                }\r\n                return newRows;\r\n            });\r\n        }\r\n    }, [level, linePoints, rowsCleared]);\r\n\r\n    useEffect(() => {\r\n        let best = localStorage.getItem('tetrisHighScore');\r\n        if (best) { setHighScore(parseInt(best)); }\r\n        let row = localStorage.getItem('tetrisMaxRows');\r\n        if (row) { setMaxRows(parseInt(row)); }\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        calcScore();\r\n    }, [calcScore, rowsCleared, score]);\r\n\r\n    return [score, setScore, rows, setRows, level, setLevel, highScore, maxRows];\r\n};","export function getLangTetris() {\r\n    let localLang = localStorage.getItem('lang');\r\n    return localLang ? JSON.parse(localLang) : 'en';\r\n}","import { useEffect, useRef } from 'react';\n\nexport function useInterval(callback, delay) {\n  const savedCallback = useRef();\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => {\n        clearInterval(id);\n      };\n    }\n  }, [delay]);\n}\n","import React from 'react';\r\nimport Tetris from './components/Tetris';\r\nimport './App.css'\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"App\">\r\n      <Tetris/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}